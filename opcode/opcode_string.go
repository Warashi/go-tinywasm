// Code generated by "stringer -type=Opcode"; DO NOT EDIT.

package opcode

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[OpcodeUnreachable-0]
	_ = x[OpcodeNop-1]
	_ = x[OpcodeBlock-2]
	_ = x[OpcodeLoop-3]
	_ = x[OpcodeIf-4]
	_ = x[OpcodeElse-5]
	_ = x[OpcodeEnd-11]
	_ = x[OpcodeBr-12]
	_ = x[OpcodeBrIf-13]
	_ = x[OpcodeBrTable-14]
	_ = x[OpcodeReturn-15]
	_ = x[OpcodeCall-16]
	_ = x[OpcodeCallIndirect-17]
	_ = x[OpcodeDrop-26]
	_ = x[OpcodeSelect-27]
	_ = x[OpcodeLocalGet-32]
	_ = x[OpcodeLocalSet-33]
	_ = x[OpcodeLocalTee-34]
	_ = x[OpcodeGlobalGet-35]
	_ = x[OpcodeGlobalSet-36]
	_ = x[OpcodeI32Load-40]
	_ = x[OpcodeI64Load-41]
	_ = x[OpcodeF32Load-42]
	_ = x[OpcodeF64Load-43]
	_ = x[OpcodeI32Load8S-44]
	_ = x[OpcodeI32Load8U-45]
	_ = x[OpcodeI32Load16S-46]
	_ = x[OpcodeI32Load16U-47]
	_ = x[OpcodeI64Load8S-48]
	_ = x[OpcodeI64Load8U-49]
	_ = x[OpcodeI64Load16S-50]
	_ = x[OpcodeI64Load16U-51]
	_ = x[OpcodeI64Load32S-52]
	_ = x[OpcodeI64Load32U-53]
	_ = x[OpcodeI32Store-54]
	_ = x[OpcodeI64Store-55]
	_ = x[OpcodeF32Store-56]
	_ = x[OpcodeF64Store-57]
	_ = x[OpcodeI32Store8-58]
	_ = x[OpcodeI32Store16-59]
	_ = x[OpcodeI64Store8-60]
	_ = x[OpcodeI64Store16-61]
	_ = x[OpcodeI64Store32-62]
	_ = x[OpcodeMemorySize-63]
	_ = x[OpcodeMemoryGrow-64]
	_ = x[OpcodeI32Const-65]
	_ = x[OpcodeI64Const-66]
	_ = x[OpcodeF32Const-67]
	_ = x[OpcodeF64Const-68]
	_ = x[OpcodeI32Eqz-69]
	_ = x[OpcodeI32Eq-70]
	_ = x[OpcodeI32Ne-71]
	_ = x[OpcodeI32LtS-72]
	_ = x[OpcodeI32LtU-73]
	_ = x[OpcodeI32GtS-74]
	_ = x[OpcodeI32GtU-75]
	_ = x[OpcodeI32LeS-76]
	_ = x[OpcodeI32LeU-77]
	_ = x[OpcodeI32GeS-78]
	_ = x[OpcodeI32GeU-79]
	_ = x[OpcodeI64Eqz-80]
	_ = x[OpcodeI64Eq-81]
	_ = x[OpcodeI64Ne-82]
	_ = x[OpcodeI64LtS-83]
	_ = x[OpcodeI64LtU-84]
	_ = x[OpcodeI64GtS-85]
	_ = x[OpcodeI64GtU-86]
	_ = x[OpcodeI64LeS-87]
	_ = x[OpcodeI64LeU-88]
	_ = x[OpcodeI64GeS-89]
	_ = x[OpcodeI64GeU-90]
	_ = x[OpcodeF32Eq-91]
	_ = x[OpcodeF32Ne-92]
	_ = x[OpcodeF32Lt-93]
	_ = x[OpcodeF32Gt-94]
	_ = x[OpcodeF32Le-95]
	_ = x[OpcodeF32Ge-96]
	_ = x[OpcodeF64Eq-97]
	_ = x[OpcodeF64Ne-98]
	_ = x[OpcodeF64Lt-99]
	_ = x[OpcodeF64Gt-100]
	_ = x[OpcodeF64Le-101]
	_ = x[OpcodeF64Ge-102]
	_ = x[OpcodeI32Clz-103]
	_ = x[OpcodeI32Ctz-104]
	_ = x[OpcodeI32Popcnt-105]
	_ = x[OpcodeI32Add-106]
	_ = x[OpcodeI32Sub-107]
	_ = x[OpcodeI32Mul-108]
	_ = x[OpcodeI32DivS-109]
	_ = x[OpcodeI32DivU-110]
	_ = x[OpcodeI32RemS-111]
	_ = x[OpcodeI32RemU-112]
	_ = x[OpcodeI32And-113]
	_ = x[OpcodeI32Or-114]
	_ = x[OpcodeI32Xor-115]
	_ = x[OpcodeI32Shl-116]
	_ = x[OpcodeI32ShrS-117]
	_ = x[OpcodeI32ShrU-118]
	_ = x[OpcodeI32Rotl-119]
	_ = x[OpcodeI32Rotr-120]
	_ = x[OpcodeI64Clz-121]
	_ = x[OpcodeI64Ctz-122]
	_ = x[OpcodeI64Popcnt-123]
	_ = x[OpcodeI64Add-124]
	_ = x[OpcodeI64Sub-125]
	_ = x[OpcodeI64Mul-126]
	_ = x[OpcodeI64DivS-127]
	_ = x[OpcodeI64DivU-128]
	_ = x[OpcodeI64RemS-129]
	_ = x[OpcodeI64RemU-130]
	_ = x[OpcodeI64And-131]
	_ = x[OpcodeI64Or-132]
	_ = x[OpcodeI64Xor-133]
	_ = x[OpcodeI64Shl-134]
	_ = x[OpcodeI64ShrS-135]
	_ = x[OpcodeI64ShrU-136]
	_ = x[OpcodeI64Rotl-137]
	_ = x[OpcodeI64Rotr-138]
	_ = x[OpcodeF32Abs-139]
	_ = x[OpcodeF32Neg-140]
	_ = x[OpcodeF32Ceil-141]
	_ = x[OpcodeF32Floor-142]
	_ = x[OpcodeF32Trunc-143]
	_ = x[OpcodeF32Nearest-144]
	_ = x[OpcodeF32Sqrt-145]
	_ = x[OpcodeF32Add-146]
	_ = x[OpcodeF32Sub-147]
	_ = x[OpcodeF32Mul-148]
	_ = x[OpcodeF32Div-149]
	_ = x[OpcodeF32Min-150]
	_ = x[OpcodeF32Max-151]
	_ = x[OpcodeF32Copysign-152]
	_ = x[OpcodeF64Abs-153]
	_ = x[OpcodeF64Neg-154]
	_ = x[OpcodeF64Ceil-155]
	_ = x[OpcodeF64Floor-156]
	_ = x[OpcodeF64Trunc-157]
	_ = x[OpcodeF64Nearest-158]
	_ = x[OpcodeF64Sqrt-159]
	_ = x[OpcodeF64Add-160]
	_ = x[OpcodeF64Sub-161]
	_ = x[OpcodeF64Mul-162]
	_ = x[OpcodeF64Div-163]
	_ = x[OpcodeF64Min-164]
	_ = x[OpcodeF64Max-165]
	_ = x[OpcodeF64Copysign-166]
	_ = x[OpcodeI32WrapI64-167]
	_ = x[OpcodeI32TruncF32S-168]
	_ = x[OpcodeI32TruncF32U-169]
	_ = x[OpcodeI32TruncF64S-170]
	_ = x[OpcodeI32TruncF64U-171]
	_ = x[OpcodeI64ExtendI32S-172]
	_ = x[OpcodeI64ExtendI32U-173]
	_ = x[OpcodeI64TruncF32S-174]
	_ = x[OpcodeI64TruncF32U-175]
	_ = x[OpcodeI64TruncF64S-176]
	_ = x[OpcodeI64TruncF64U-177]
	_ = x[OpcodeF32ConvertI32S-178]
	_ = x[OpcodeF32ConvertI32U-179]
	_ = x[OpcodeF32ConvertI64S-180]
	_ = x[OpcodeF32ConvertI64U-181]
	_ = x[OpcodeF32DemoteF64-182]
	_ = x[OpcodeF64ConvertI32S-183]
	_ = x[OpcodeF64ConvertI32U-184]
	_ = x[OpcodeF64ConvertI64S-185]
	_ = x[OpcodeF64ConvertI64U-186]
	_ = x[OpcodeF64PromoteF32-187]
	_ = x[OpcodeI32ReinterpretF32-188]
	_ = x[OpcodeI64ReinterpretF64-189]
	_ = x[OpcodeF32ReinterpretI32-190]
	_ = x[OpcodeF64ReinterpretI64-191]
	_ = x[OpcodeGCSRPrefix-251]
	_ = x[OpcodeFCPrefix-252]
	_ = x[OpcodeSIMDPrefix-253]
	_ = x[OpcodeThreadsPrefix-254]
}

const (
	_Opcode_name_0 = "OpcodeUnreachableOpcodeNopOpcodeBlockOpcodeLoopOpcodeIfOpcodeElse"
	_Opcode_name_1 = "OpcodeEndOpcodeBrOpcodeBrIfOpcodeBrTableOpcodeReturnOpcodeCallOpcodeCallIndirect"
	_Opcode_name_2 = "OpcodeDropOpcodeSelect"
	_Opcode_name_3 = "OpcodeLocalGetOpcodeLocalSetOpcodeLocalTeeOpcodeGlobalGetOpcodeGlobalSet"
	_Opcode_name_4 = "OpcodeI32LoadOpcodeI64LoadOpcodeF32LoadOpcodeF64LoadOpcodeI32Load8SOpcodeI32Load8UOpcodeI32Load16SOpcodeI32Load16UOpcodeI64Load8SOpcodeI64Load8UOpcodeI64Load16SOpcodeI64Load16UOpcodeI64Load32SOpcodeI64Load32UOpcodeI32StoreOpcodeI64StoreOpcodeF32StoreOpcodeF64StoreOpcodeI32Store8OpcodeI32Store16OpcodeI64Store8OpcodeI64Store16OpcodeI64Store32OpcodeMemorySizeOpcodeMemoryGrowOpcodeI32ConstOpcodeI64ConstOpcodeF32ConstOpcodeF64ConstOpcodeI32EqzOpcodeI32EqOpcodeI32NeOpcodeI32LtSOpcodeI32LtUOpcodeI32GtSOpcodeI32GtUOpcodeI32LeSOpcodeI32LeUOpcodeI32GeSOpcodeI32GeUOpcodeI64EqzOpcodeI64EqOpcodeI64NeOpcodeI64LtSOpcodeI64LtUOpcodeI64GtSOpcodeI64GtUOpcodeI64LeSOpcodeI64LeUOpcodeI64GeSOpcodeI64GeUOpcodeF32EqOpcodeF32NeOpcodeF32LtOpcodeF32GtOpcodeF32LeOpcodeF32GeOpcodeF64EqOpcodeF64NeOpcodeF64LtOpcodeF64GtOpcodeF64LeOpcodeF64GeOpcodeI32ClzOpcodeI32CtzOpcodeI32PopcntOpcodeI32AddOpcodeI32SubOpcodeI32MulOpcodeI32DivSOpcodeI32DivUOpcodeI32RemSOpcodeI32RemUOpcodeI32AndOpcodeI32OrOpcodeI32XorOpcodeI32ShlOpcodeI32ShrSOpcodeI32ShrUOpcodeI32RotlOpcodeI32RotrOpcodeI64ClzOpcodeI64CtzOpcodeI64PopcntOpcodeI64AddOpcodeI64SubOpcodeI64MulOpcodeI64DivSOpcodeI64DivUOpcodeI64RemSOpcodeI64RemUOpcodeI64AndOpcodeI64OrOpcodeI64XorOpcodeI64ShlOpcodeI64ShrSOpcodeI64ShrUOpcodeI64RotlOpcodeI64RotrOpcodeF32AbsOpcodeF32NegOpcodeF32CeilOpcodeF32FloorOpcodeF32TruncOpcodeF32NearestOpcodeF32SqrtOpcodeF32AddOpcodeF32SubOpcodeF32MulOpcodeF32DivOpcodeF32MinOpcodeF32MaxOpcodeF32CopysignOpcodeF64AbsOpcodeF64NegOpcodeF64CeilOpcodeF64FloorOpcodeF64TruncOpcodeF64NearestOpcodeF64SqrtOpcodeF64AddOpcodeF64SubOpcodeF64MulOpcodeF64DivOpcodeF64MinOpcodeF64MaxOpcodeF64CopysignOpcodeI32WrapI64OpcodeI32TruncF32SOpcodeI32TruncF32UOpcodeI32TruncF64SOpcodeI32TruncF64UOpcodeI64ExtendI32SOpcodeI64ExtendI32UOpcodeI64TruncF32SOpcodeI64TruncF32UOpcodeI64TruncF64SOpcodeI64TruncF64UOpcodeF32ConvertI32SOpcodeF32ConvertI32UOpcodeF32ConvertI64SOpcodeF32ConvertI64UOpcodeF32DemoteF64OpcodeF64ConvertI32SOpcodeF64ConvertI32UOpcodeF64ConvertI64SOpcodeF64ConvertI64UOpcodeF64PromoteF32OpcodeI32ReinterpretF32OpcodeI64ReinterpretF64OpcodeF32ReinterpretI32OpcodeF64ReinterpretI64"
	_Opcode_name_5 = "OpcodeGCSRPrefixOpcodeFCPrefixOpcodeSIMDPrefixOpcodeThreadsPrefix"
)

var (
	_Opcode_index_0 = [...]uint8{0, 17, 26, 37, 47, 55, 65}
	_Opcode_index_1 = [...]uint8{0, 9, 17, 27, 40, 52, 62, 80}
	_Opcode_index_2 = [...]uint8{0, 10, 22}
	_Opcode_index_3 = [...]uint8{0, 14, 28, 42, 57, 72}
	_Opcode_index_4 = [...]uint16{0, 13, 26, 39, 52, 67, 82, 98, 114, 129, 144, 160, 176, 192, 208, 222, 236, 250, 264, 279, 295, 310, 326, 342, 358, 374, 388, 402, 416, 430, 442, 453, 464, 476, 488, 500, 512, 524, 536, 548, 560, 572, 583, 594, 606, 618, 630, 642, 654, 666, 678, 690, 701, 712, 723, 734, 745, 756, 767, 778, 789, 800, 811, 822, 834, 846, 861, 873, 885, 897, 910, 923, 936, 949, 961, 972, 984, 996, 1009, 1022, 1035, 1048, 1060, 1072, 1087, 1099, 1111, 1123, 1136, 1149, 1162, 1175, 1187, 1198, 1210, 1222, 1235, 1248, 1261, 1274, 1286, 1298, 1311, 1325, 1339, 1355, 1368, 1380, 1392, 1404, 1416, 1428, 1440, 1457, 1469, 1481, 1494, 1508, 1522, 1538, 1551, 1563, 1575, 1587, 1599, 1611, 1623, 1640, 1656, 1674, 1692, 1710, 1728, 1747, 1766, 1784, 1802, 1820, 1838, 1858, 1878, 1898, 1918, 1936, 1956, 1976, 1996, 2016, 2035, 2058, 2081, 2104, 2127}
	_Opcode_index_5 = [...]uint8{0, 16, 30, 46, 65}
)

func (i Opcode) String() string {
	switch {
	case i <= 5:
		return _Opcode_name_0[_Opcode_index_0[i]:_Opcode_index_0[i+1]]
	case 11 <= i && i <= 17:
		i -= 11
		return _Opcode_name_1[_Opcode_index_1[i]:_Opcode_index_1[i+1]]
	case 26 <= i && i <= 27:
		i -= 26
		return _Opcode_name_2[_Opcode_index_2[i]:_Opcode_index_2[i+1]]
	case 32 <= i && i <= 36:
		i -= 32
		return _Opcode_name_3[_Opcode_index_3[i]:_Opcode_index_3[i+1]]
	case 40 <= i && i <= 191:
		i -= 40
		return _Opcode_name_4[_Opcode_index_4[i]:_Opcode_index_4[i+1]]
	case 251 <= i && i <= 254:
		i -= 251
		return _Opcode_name_5[_Opcode_index_5[i]:_Opcode_index_5[i+1]]
	default:
		return "Opcode(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
